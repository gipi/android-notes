```
$ hmm
Invoke ". build/envsetup.sh" from your shell to add the following functions to your environment:
- lunch:   lunch <product_name>-<build_variant>
- tapas:   tapas [<App1> <App2> ...] [arm|x86|mips|armv5] [eng|userdebug|user]
- croot:   Changes directory to the top of the tree.
- m:       Makes from the top of the tree.
- mm:      Builds all of the modules in the current directory, but not their dependencies.
- mmm:     Builds all of the modules in the supplied directories, but not their dependencies.
           To limit the modules being built use the syntax: mmm dir/:target1,target2.
- mma:     Builds all of the modules in the current directory, and their dependencies.
- mmma:    Builds all of the modules in the supplied directories, and their dependencies.
- cgrep:   Greps on all local C/C++ files.
- jgrep:   Greps on all local Java files.
- resgrep: Greps on all local res/*.xml files.
- godir:   Go to the directory containing a file.

Look at the source to view more functions. The complete list is:
addcompletions add_lunch_combo cgrep check_product check_variant choosecombo chooseproduct choosetype choosevariant cproj croot findmakefile gdbclient gdbwrapper get_abs_build_var getbugreports get_build_var getdriver getlastscreenshot getprebuilt getscreenshotpath getsdcardpath gettargetarch gettop godir hmm is isviewserverstarted jgrep key_back key_home key_menu lunch _lunch m mangrep mm mma mmm mmma pez pid printconfig print_lunch_menu qpid resgrep runhat runtest sepgrep set_java_home setpaths set_sequence_number set_stuff_for_environment settitle smoketest stacks startviewserver stopviewserver systemstack tapas tracedmdump
```

http://www.jayway.com/2012/10/24/a-practical-approach-to-the-aosp-build-system/

``LOCAL_MODULE`` is the variable defining a module to build, in order to find where is defined you can use the following piece command

```
find . ! -path './out/*' -name Android.mk -exec grep -H 'LOCAL_MODULE.*:=.*'<module name> \{\}  \;
```

First of all ``build/core/main.mk`` looks for all the ``Android.mk`` in the AOSP using the command

```
$ build/tools/findleaves.py --prune=out --prune=.repo --prune=.git . Android.mk
```

After that in ``build/core/product.mk`` the system build up the ``PRODUCT_MAKEFILES`` variable containing
all the products available to build:

```Makefile
#
# Functions for including AndroidProducts.mk files
#

#
# Returns the list of all AndroidProducts.mk files.
# $(call ) isn't necessary.
#
define _find-android-products-files
$(shell test -d device && find device -maxdepth 6 -name AndroidProducts.mk) \
  $(shell test -d vendor && find vendor -maxdepth 6 -name AndroidProducts.mk) \
  $(SRC_TARGET_DIR)/product/AndroidProducts.mk
endef

#
# Returns the sorted concatenation of PRODUCT_MAKEFILES
# variables set in the given AndroidProducts.mk files.
# $(1): the list of AndroidProducts.mk files.
#
define get-product-makefiles
$(sort \
  $(foreach f,$(1), \
    $(eval PRODUCT_MAKEFILES :=) \
    $(eval LOCAL_DIR := $(patsubst %/,%,$(dir $(f)))) \
    $(eval include $(f)) \
    $(PRODUCT_MAKEFILES) \
   ) \
  $(eval PRODUCT_MAKEFILES :=) \
  $(eval LOCAL_DIR :=) \
 )
endef

#
# Returns the sorted concatenation of all PRODUCT_MAKEFILES
# variables set in all AndroidProducts.mk files.
# $(call ) isn't necessary.
#
define get-all-product-makefiles
$(call get-product-makefiles,$(_find-android-products-files))
endef
```
Inside ``build/target/board/Android.mk`` is called the AndroidBoard.mk of the target device by

```Makefile
-include $(TARGET_DEVICE_DIR)/AndroidBoard.mk
```

We have only to know that ``TARGET_DEVICE_DIR`` is defined as

```Makefile
# Boards may be defined under $(SRC_TARGET_DIR)/board/$(TARGET_DEVICE)
# or under vendor/*/$(TARGET_DEVICE).  Search in both places, but
# make sure only one exists.
# Real boards should always be associated with an OEM vendor.
board_config_mk := \
	$(strip $(wildcard \
		$(SRC_TARGET_DIR)/board/$(TARGET_DEVICE)/BoardConfig.mk \
		device/*/$(TARGET_DEVICE)/BoardConfig.mk \
		vendor/*/$(TARGET_DEVICE)/BoardConfig.mk \
	))
ifeq ($(board_config_mk),)
  $(error No config file found for TARGET_DEVICE $(TARGET_DEVICE))
endif
ifneq ($(words $(board_config_mk)),1)
  $(error Multiple board config files for TARGET_DEVICE $(TARGET_DEVICE): $(board_config_mk))
endif

TARGET_DEVICE_DIR := $(patsubst %/,%,$(dir $(board_config_mk)))
```

in ``build/core/config.mk``. Instead in ``build/core/definitions.mk``

```Makefile
# Copy a prebuilt file to a target location.
define transform-prebuilt-to-target
@echo "$(if $(PRIVATE_IS_HOST_MODULE),host,target) Prebuilt: $(PRIVATE_MODULE) ($@)"
$(copy-file-to-target)
endef
```

```Makefile
define copy-file-to-target
@mkdir -p $(dir $@)
$(hide) $(ACP) -fp $< $@
endef

```

From ``build/target/board/Android.mk``

```Makefile
ifneq ($(strip $(TARGET_NO_KERNEL)),true)
  INSTALLED_KERNEL_TARGET := $(PRODUCT_OUT)/kernel
else
  INSTALLED_KERNEL_TARGET :=
endif

```

Recovery&Update.zip
-------------------

It's possible to update the system using a [zip file containing a script](http://www.londatiga.net/it/how-to-create-android-update-zip-package/). For the code about this functionality look at the [code](https://android.googlesource.com/platform/bootable/recovery/+/refs/heads/ics-plus-aosp/).

Fastboot
--------

It's not possible to use it with the emulator ([source](https://groups.google.com/forum/?fromgroups=#!topic/android-beginners/IFYCCGxykxY)).

 - http://elinux.org/Android_Fastboot
 - http://www.omappedia.com/wiki/Android_Fastboot

https://android.googlesource.com/platform/system/core/+/android-4.2.2_r1.2/fastboot/fastboot.c


Toolchains
----------

```
A=$ANDROID_BUILD_TOP
TC=/tmp/toolchain-source
cd $A/ndk/build/tools
./download-toolchain-sources.sh $TC


```

```
mkdir -p /opt/android-toolchain-repo/
cd /opt/android-toolchain-repo
repo init -u https://android.googlesource.com/toolchain/manifest.git
repo sync
```